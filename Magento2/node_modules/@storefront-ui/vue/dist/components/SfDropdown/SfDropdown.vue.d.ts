import { PropType } from 'vue';
import { Middleware } from '@floating-ui/vue';
import { SfPopoverPlacement, SfPopoverStrategy } from '../../index.ts';

declare function __VLS_template(): {
    trigger?(_: {}): any;
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<`${SfPopoverPlacement}` | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<Middleware[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<`${SfPopoverStrategy}` | undefined>;
        default: undefined;
    };
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: boolean) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<`${SfPopoverPlacement}` | undefined>;
        default: undefined;
    };
    middleware: {
        type: PropType<Middleware[] | undefined>;
        default: undefined;
    };
    strategy: {
        type: PropType<`${SfPopoverStrategy}` | undefined>;
        default: undefined;
    };
}>> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
}>, {
    middleware: {
        name: string;
        options?: any;
        fn: (state: import('@floating-ui/dom').MiddlewareState) => import('@floating-ui/core').MiddlewareReturn | Promise<import('@floating-ui/core').MiddlewareReturn>;
    }[] | undefined;
    placement: "top-start" | "top" | "top-end" | "bottom-start" | "bottom" | "bottom-end" | "left-start" | "left" | "left-end" | "right-start" | "right" | "right-end" | undefined;
    strategy: "fixed" | "absolute" | undefined;
    modelValue: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=SfDropdown.vue.d.ts.map