import { defineComponent as V, toRefs as x, ref as w, computed as z, openBlock as f, createElementBlock as c, normalizeClass as o, unref as e, withDirectives as C, createElementVNode as h, mergeProps as B, withKeys as N, toDisplayString as k, createCommentVNode as q, renderSlot as p, vModelSelect as $, createVNode as D } from "vue";
import E from "../SfIcons/SfIconExpandMore.vue.mjs";
import { SfSelectSize as s } from "@storefront-ui/shared";
import { useDisclosure as F } from "../../composables/useDisclosure/useDisclosure.mjs";
import { useFocusVisible as K } from "../../composables/useFocusVisible/useFocusVisible.mjs";
const M = ["required", "disabled"], j = /* @__PURE__ */ V({
  inheritAttrs: !1,
  __name: "SfSelect",
  props: {
    size: {
      type: String,
      default: s.base
    },
    placeholder: {
      type: String,
      default: ""
    },
    required: {
      type: Boolean,
      default: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    invalid: {
      type: Boolean,
      default: !1
    },
    modelValue: {
      type: String,
      default: ""
    },
    wrapperClassName: {
      type: String,
      default: ""
    }
  },
  emits: ["update:modelValue"],
  setup(t, { emit: g }) {
    const b = t, y = g, { modelValue: d } = x(b), { isOpen: v, close: n, open: r } = F(), { isFocusVisible: S } = K(), u = w(d.value), m = z({
      get: () => d.value || u.value,
      set: (i) => {
        y("update:modelValue", i), u.value = i;
      }
    });
    return (i, l) => (f(), c("span", {
      class: o([
        "relative flex flex-col rounded-md",
        {
          "focus-within:outline focus-within:outline-offset": e(S)
        },
        t.wrapperClassName
      ]),
      "data-testid": "select"
    }, [
      C(h("select", B({
        "onUpdate:modelValue": l[0] || (l[0] = (a) => m.value = a),
        required: t.required,
        disabled: t.disabled,
        class: [
          "appearance-none disabled:cursor-not-allowed cursor-pointer pl-4 pr-3.5 text-neutral-900 ring-inset focus:ring-primary-700 focus:ring-2 outline-none bg-transparent rounded-md ring-1 ring-neutral-300 hover:ring-primary-700 active:ring-2 active:ring-primary-700 disabled:bg-disabled-100 disabled:text-disabled-900 disabled:ring-disabled-200",
          {
            "py-1.5": t.size === e(s).sm,
            "py-2": t.size === e(s).base,
            "py-3 text-base": t.size === e(s).lg,
            "!ring-negative-700 ring-2": t.invalid && !t.disabled
          }
        ],
        "data-testid": "select-input",
        onBlur: l[1] || (l[1] = //@ts-ignore
        (...a) => e(n) && e(n)(...a)),
        onChange: l[2] || (l[2] = //@ts-ignore
        (...a) => e(n) && e(n)(...a)),
        onClick: l[3] || (l[3] = //@ts-ignore
        (...a) => e(r) && e(r)(...a)),
        onKeydown: l[4] || (l[4] = N(
          //@ts-ignore
          (...a) => e(r) && e(r)(...a),
          ["space"]
        ))
      }, i.$attrs), [
        t.placeholder ? (f(), c("option", {
          key: 0,
          hidden: "",
          class: o(["text-sm bg-neutral-300", [
            "bg-neutral-300 text-sm",
            {
              "text-base": t.size === e(s).lg
            }
          ]]),
          value: "",
          "data-testid": "select-placeholder"
        }, k(t.placeholder), 3)) : q("", !0),
        p(i.$slots, "default")
      ], 16, M), [
        [$, m.value]
      ]),
      p(i.$slots, "chevron", {}, () => [
        D(e(E), {
          class: o([
            "absolute -translate-y-1 pointer-events-none top-1/3 right-4 transition easy-in-out duration-0.5",
            t.disabled ? "text-disabled-500" : "text-neutral-500",
            e(v) ? "rotate-180" : ""
          ])
        }, null, 8, ["class"])
      ])
    ], 2));
  }
});
export {
  j as default
};
