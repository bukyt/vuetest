import { ref as S, computed as e, toValue as $, unref as D } from "vue";
import { offset as M, shift as O, flip as z, arrow as T } from "@floating-ui/vue";
import { useDisclosure as V } from "../useDisclosure/useDisclosure.mjs";
import { usePopover as X } from "../usePopover/usePopover.mjs";
function A(u) {
  const {
    placement: w = "top",
    strategy: g,
    middleware: y,
    arrowSize: o = "6px",
    ...d
  } = u || {}, t = S(), { isOpen: r, open: l, close: n, toggle: v } = V(), {
    style: a,
    middlewareData: s,
    placement: b,
    referenceRef: i,
    floatingRef: p
  } = X({
    isOpen: r,
    placement: w,
    strategy: g,
    middleware: e(() => [
      ...$(y) || [M(8), O(), z()],
      T({ element: t })
    ]),
    ...d
  });
  function f() {
    if (s.value.arrow) {
      const { x: c, y: m } = s.value.arrow, R = D(b).split("-")[0];
      return {
        position: "absolute",
        width: o,
        height: o,
        top: typeof m == "number" ? `${m}px` : "",
        left: typeof c == "number" ? `${c}px` : "",
        [{
          top: "bottom",
          right: "left",
          bottom: "top",
          left: "right"
        }[R]]: `calc(${o} / -2)`
      };
    }
    return {};
  }
  const h = e(() => ({
    ref: i,
    onMouseenter: l,
    onMouseleave: n
  })), P = e(() => ({
    ref: p,
    style: a.value
  })), x = e(() => ({
    ref: t,
    style: f()
  }));
  return {
    referenceRef: i,
    floatingRef: p,
    arrowRef: t,
    style: e(() => ({
      floating: a.value,
      arrow: f()
    })),
    isOpen: r,
    open: l,
    close: n,
    toggle: v,
    triggerProps: h,
    tooltipProps: P,
    arrowProps: x
  };
}
export {
  A as useTooltip
};
