import { BundleProduct, CartItemInput, ConfigurableProduct, CustomerOrdersFilterInput, DownloadableProduct, GroupedProduct, InputMaybe, ProductAttributeFilterInput, ProductAttributeSortInput, ProductInterface, Scalars, SetPaymentMethodOnCartInput, VirtualProduct } from './Schema';
export type CustomQuery = Record<string, string>;
export type AddProductsToCartInput = {
    cartId: string;
    cartItems: CartItemInput[];
};
export type CustomerProductReviewParams = {
    currentPage?: InputMaybe<Scalars['Int']>;
    pageSize?: InputMaybe<Scalars['Int']>;
};
export interface SetPaymentMethodOnCartInputs extends SetPaymentMethodOnCartInput {
    [k: string]: any;
}
export type RouteQuery<ROUTE_TYPE> = {
    route: ROUTE_TYPE;
};
export interface Product extends ProductInterface, ConfigurableProduct, Omit<BundleProduct, 'items'>, Omit<GroupedProduct, 'items'>, Omit<DownloadableProduct, 'items'>, Omit<VirtualProduct, 'items'> {
}
export declare const enum ProductsQueryType {
    List = "LIST",
    Detail = "DETAIL"
}
export type GetProductSearchParams = {
    pageSize?: number;
    currentPage?: number;
    search?: string;
    filter?: ProductAttributeFilterInput;
    sort?: ProductAttributeSortInput;
    configurations?: string[];
};
export type GetOrdersSearchParams = {
    pageSize?: number;
    currentPage?: number;
    filter?: CustomerOrdersFilterInput;
};
export declare enum MagentoCustomerGender {
    Male = 1,
    Female = 2
}
export declare type CustomHeaders = Record<string, string>;
//# sourceMappingURL=Api.d.ts.map