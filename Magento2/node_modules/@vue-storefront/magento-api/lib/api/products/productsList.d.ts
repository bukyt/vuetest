/**
 * GraphQL Query that fetches products using received search term and the params
 * for filter, sort and pagination.
 */
declare const _default: "\n  query productsList($search: String = \"\", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {\n    products(search: $search, filter: $filter, pageSize: $pageSize, currentPage: $currentPage, sort: $sort) {\n      aggregations {\n        attribute_code\n        label\n        options {\n          label\n          value\n          count\n        }\n      }\n      items {\n        uid\n        sku\n        name\n        stock_status\n        only_x_left_in_stock\n        rating_summary\n        thumbnail {\n          url\n          position\n          disabled\n          label\n        }\n        url_key\n        url_rewrites {\n          url\n        }\n        price_range {\n          maximum_price {\n            final_price {\n              currency\n              value\n            }\n            regular_price {\n              currency\n              value\n            }\n          }\n          minimum_price {\n            final_price {\n              currency\n              value\n            }\n            regular_price {\n              currency\n              value\n            }\n          }\n        }\n        categories {\n          uid\n          name\n          url_suffix\n          url_path\n          breadcrumbs {\n            category_name,\n            category_url_path\n          }\n        }\n        review_count\n        reviews {\n          items {\n            average_rating\n            ratings_breakdown {\n              name\n              value\n            }\n          }\n        }\n        ... on GroupedProduct {\n          items {\n            product {\n              sku\n            }\n          }\n        }\n        ... on ConfigurableProduct {\n          variants {\n            product {\n              uid\n              sku\n              name\n              only_x_left_in_stock\n              price_range {\n                minimum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n              }\n              thumbnail {\n                url\n                position\n                disabled\n                label\n              }\n            }\n          }\n        }\n      }\n      page_info {\n        current_page\n        page_size\n        total_pages\n      }\n      total_count\n    }\n  }\n";
export default _default;
//# sourceMappingURL=productsList.d.ts.map