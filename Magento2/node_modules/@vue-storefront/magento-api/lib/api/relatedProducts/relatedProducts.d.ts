/**
 * GraphQL Query that searches for related products using params for sorting,
 * filtering and pagination.
 */
declare const _default: "\n  query relatedProduct(\n    $search: String = \"\"\n    $filter: ProductAttributeFilterInput\n    $pageSize: Int = 10\n    $currentPage: Int = 1\n    $sort: ProductAttributeSortInput\n  ) {\n    products(\n      search: $search\n      filter: $filter\n      sort: $sort\n      pageSize: $pageSize\n      currentPage: $currentPage\n    ) {\n      items {\n        related_products {\n          uid\n          __typename\n          sku\n          name\n          stock_status\n          only_x_left_in_stock\n          rating_summary\n          thumbnail {\n            url\n            position\n            disabled\n            label\n          }\n          url_key\n          url_rewrites {\n            url\n          }\n          price_range {\n            maximum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            minimum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          categories {\n            uid\n            name\n            url_suffix\n            url_path\n            breadcrumbs {\n              category_name,\n              category_url_path\n            }\n          }\n          review_count\n          reviews {\n            items {\n              average_rating\n              ratings_breakdown {\n                name\n                value\n              }\n            }\n          }\n        }\n        uid\n      }\n    }\n  }\n";
export default _default;
//# sourceMappingURL=relatedProducts.d.ts.map